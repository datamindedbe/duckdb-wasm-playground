import { c as create_ssr_component, e as escape, d as null_to_empty } from "../../chunks/ssr.js";
import "ag-grid-community";
const css = {
  code: "h1.svelte-b9iudl{font-family:Arial}.hidden.svelte-b9iudl{display:none}.queryResult.svelte-b9iudl{margin-top:20px;padding:10px;border:1px solid #ccc;border-radius:5px;width:50%;height:50%;overflow-x:auto}.input.svelte-b9iudl{padding:10px;border:1px solid #ccc;border-radius:5px;width:50%;height:100px}.container.svelte-b9iudl{display:flex;flex-direction:column;align-items:center;justify-content:center;height:100vh}",
  map: `{"version":3,"file":"+page.svelte","sources":["+page.svelte"],"sourcesContent":["<script lang=\\"ts\\">import * as duckdb from \\"@duckdb/duckdb-wasm\\";\\nimport duckdb_wasm from \\"@duckdb/duckdb-wasm/dist/duckdb-mvp.wasm?url\\";\\nimport mvp_worker from \\"@duckdb/duckdb-wasm/dist/duckdb-browser-mvp.worker.js?url\\";\\nimport duckdb_wasm_eh from \\"@duckdb/duckdb-wasm/dist/duckdb-eh.wasm?url\\";\\nimport eh_worker from \\"@duckdb/duckdb-wasm/dist/duckdb-browser-eh.worker.js?url\\";\\nimport { DuckDBDataProtocol } from \\"@duckdb/duckdb-wasm\\";\\nimport { onMount } from \\"svelte\\";\\nimport { GridApi, createGrid } from \\"ag-grid-community\\";\\nimport \\"ag-grid-community/styles/ag-grid.css\\";\\nimport \\"ag-grid-community/styles/ag-theme-quartz.css\\";\\nexport let queryResult;\\nexport let queryInput = \\"\\";\\nexport let files;\\nlet db;\\nlet agGridApi;\\nlet columns = [];\\nasync function initDuckDb() {\\n  const MANUAL_BUNDLES = {\\n    mvp: {\\n      mainModule: duckdb_wasm,\\n      mainWorker: mvp_worker\\n    },\\n    eh: {\\n      mainModule: duckdb_wasm_eh,\\n      mainWorker: eh_worker\\n    }\\n  };\\n  const bundle = await duckdb.selectBundle(MANUAL_BUNDLES);\\n  const worker = new Worker(bundle.mainWorker);\\n  const logger = new duckdb.ConsoleLogger();\\n  const db2 = new duckdb.AsyncDuckDB(logger, worker);\\n  await db2.instantiate(bundle.mainModule, bundle.pthreadWorker);\\n  return db2;\\n}\\nasync function query(queryString) {\\n  const c = await (await db).connect();\\n  const result = await c.query(queryString);\\n  console.log(result);\\n  queryResult = result;\\n  columns = queryResult.schema.fields.map((field) => field.name);\\n  const queryData = queryResult.toArray();\\n  let colDefs = [];\\n  columns.forEach(\\n    (key) => colDefs.push({\\n      field: key,\\n      filter: true\\n    })\\n  );\\n  agGridApi.setGridOption(\\"columnDefs\\", colDefs);\\n  agGridApi.setGridOption(\\"rowData\\", queryData);\\n  agGridApi = agGridApi;\\n}\\nasync function registerFiles(files2) {\\n  for (let file of files2) {\\n    console.log(file);\\n    await (await db).registerFileHandle(\\n      file.name,\\n      file,\\n      DuckDBDataProtocol.BROWSER_FILEREADER,\\n      true\\n    );\\n    queryInput = \`select * from \${file.name};\`;\\n  }\\n}\\nonMount(() => {\\n  agGridApi = createGrid(\\n    document.getElementById(\\"queryResultGrid\\"),\\n    {}\\n  );\\n  db = initDuckDb();\\n});\\n<\/script>\\n\\n<div class=\\"container\\">\\n  <figure>\\n    <img src=\\"inspector_duck.png\\" alt=\\"DuckDB Logo\\" height=\\"200px\\" />\\n    <h1>Inspector Duck</h1>\\n  </figure>\\n  <input type=\\"file\\" id=\\"file\\" bind:files multiple on:change={() => {registerFiles(files)}} />\\n  {#if files && files[0]}\\n    <textarea\\n      class=\\"input\\"\\n      bind:value={queryInput}\\n      rows=\\"10\\"\\n      placeholder=\\"select * from {files[0].name};\\"\\n    />\\n    <br />\\n    <button\\n      on:click={() => {\\n        query(queryInput);\\n      }}>Query</button\\n    >\\n  {/if}\\n  <div\\n    class={columns.length > 0\\n      ? 'queryResult ag-theme-quartz-auto-dark'\\n      : 'queryResult ag-theme-quartz-auto-dark hidden'}\\n    id=\\"queryResultGrid\\"\\n  ></div>\\n</div>\\n\\n<style>\\n  h1 {\\n    font-family: Arial;\\n  }\\n  .hidden {\\n    display: none;\\n  }\\n  .queryResult {\\n    margin-top: 20px;\\n    padding: 10px;\\n    border: 1px solid #ccc;\\n    border-radius: 5px;\\n    width: 50%;\\n    height: 50%;\\n    overflow-x: auto;\\n  }\\n  .input {\\n    padding: 10px;\\n    border: 1px solid #ccc;\\n    border-radius: 5px;\\n    width: 50%;\\n    height: 100px;\\n  }\\n  .container {\\n    display: flex;\\n    flex-direction: column;\\n    align-items: center;\\n    justify-content: center;\\n    height: 100vh;\\n  }\\n</style>\\n"],"names":[],"mappings":"AAsGE,gBAAG,CACD,WAAW,CAAE,KACf,CACA,qBAAQ,CACN,OAAO,CAAE,IACX,CACA,0BAAa,CACX,UAAU,CAAE,IAAI,CAChB,OAAO,CAAE,IAAI,CACb,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,CACtB,aAAa,CAAE,GAAG,CAClB,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,GAAG,CACX,UAAU,CAAE,IACd,CACA,oBAAO,CACL,OAAO,CAAE,IAAI,CACb,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,CACtB,aAAa,CAAE,GAAG,CAClB,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,KACV,CACA,wBAAW,CACT,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,WAAW,CAAE,MAAM,CACnB,eAAe,CAAE,MAAM,CACvB,MAAM,CAAE,KACV"}`
};
const Page = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let { queryResult } = $$props;
  let { queryInput = "" } = $$props;
  let { files } = $$props;
  let columns = [];
  if ($$props.queryResult === void 0 && $$bindings.queryResult && queryResult !== void 0) $$bindings.queryResult(queryResult);
  if ($$props.queryInput === void 0 && $$bindings.queryInput && queryInput !== void 0) $$bindings.queryInput(queryInput);
  if ($$props.files === void 0 && $$bindings.files && files !== void 0) $$bindings.files(files);
  $$result.css.add(css);
  return `<div class="container svelte-b9iudl"><figure data-svelte-h="svelte-1r4tv98"><img src="inspector_duck.png" alt="DuckDB Logo" height="200px"> <h1 class="svelte-b9iudl">Inspector Duck</h1></figure> <input type="file" id="file" multiple> ${files && files[0] ? `<textarea class="input svelte-b9iudl" rows="10" placeholder="${"select * from " + escape(files[0].name, true) + ";"}">${escape(queryInput || "")}</textarea> <br> <button data-svelte-h="svelte-1ymq1ao">Query</button>` : ``} <div class="${escape(
    null_to_empty(columns.length > 0 ? "queryResult ag-theme-quartz-auto-dark" : "queryResult ag-theme-quartz-auto-dark hidden"),
    true
  ) + " svelte-b9iudl"}" id="queryResultGrid"></div> </div>`;
});
export {
  Page as default
};
